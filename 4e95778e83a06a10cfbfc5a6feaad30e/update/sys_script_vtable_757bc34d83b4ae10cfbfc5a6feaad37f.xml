<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script_vtable">
    <sys_script_vtable action="INSERT_OR_UPDATE">
        <active>true</active>
        <advanced>true</advanced>
        <cache_isolation_level>SYSTEM</cache_isolation_level>
        <cache_strategy>CACHE_BY_QUERY</cache_strategy>
        <cache_ttl>3600</cache_ttl>
        <delete_script><![CDATA[(function executeDelete(v_record) {
     // Parameters:
     //      v_record - a map of field names and values containing (among others) the
     //              sys_id of the record that needs to be deleted on the remote system
     //          v_record.<field_name>                  - fields in the remote table GlideRecord
     //          v_record.setLastErrorMessage(message)   - signal an error
 
     // Sample code:
     //  try {
     //      update-external-system;
     //      if (there-was-an-error) {
     //          var message = ...;
     //          v_record.setLastErrorMessage(message);
     //      }
     //  } catch (ex) {
     //      var message = ex.getMessage();
     //      v_record.setLastErrorMessage(message);
     //  }
  })(v_record);]]></delete_script>
        <editable>false</editable>
        <enhanced_capacity>false</enhanced_capacity>
        <flow/>
        <insert_script><![CDATA[(function executeInsert(v_record) {
     // Parameters:
     //      v_record is a map of field names and values containing the sys_id of the
     //              record and the fields that need to be inserted in the record on the
     //              remote system (source of data)
     
     //          v_record.<field_name>                   - fields in the remote table GlideRecord
     //          v_record.setLastErrorMessage(message)   - signal an error
 
     // Sample code:
     //  try {
     //      update-external-system;
     //      if (there-was-an-error) {
     //          var message = ...;
     //          v_record.setLastErrorMessage(message);
     //      }
     //  } catch (ex) {
     //      var message = ex.getMessage();
     //      v_record.setLastErrorMessage(message);
     //  }
  })(v_record);]]></insert_script>
        <name>Okta Users Factor remote table def</name>
        <script><![CDATA[// all by myself
// so sad
// programming (bad)
// cats be sleeping
// not meowing for food
// is work over yet -DN

(function executeQuery(v_table, v_query) {
    // Parameters:
    //      v_table - object to record response:
    //          v_table.addRow({...}) - adds a row to the result set.
    //              keys are the column names of the table definition.
    //              sys_id must be non-empty and uniquely identify each row.
    //                  the above rule will be strictly enforced for editable tables, and generate warnings for read-only tables.
    //                  sys_id will be supplied to the Update, and Delete scripts to specify the row's identity.

    //      v_query - the query definition:
    //          v_query.getEncodedQuery()              - encoded querystring
    //          v_query.getCondition(field)            - encoded querystring for the given field (includes field name, operator, and value)
    //          v_query.getParameter(field)            - parameter for the given field (only includes value for equality conditions)
    //          v_query.isGet()                        - whether the query is a single get by sys_id
    //          v_query.getSysId()                     - parameter for sys_id field
    //          v_query.isTextSearch()                 - whether the query contains a text query parameter
    //          v_query.getTextSearch()                - text search query parameter (internal field name 123TEXTQUERY321)
    //          v_query.getFirstRowWanted()            - the first row to include, don't use with caching
    //          v_query.getLastRowWanted()             - the last row to include, don't use with caching
    //          v_query.setLastErrorMessage(message)   - the message is visible from GlideRecord.getLastErrorMessage()

    // Sample code:
    //  try {
    //      retrieve-rows-from-external-system;     //      if (there-was-an-error) {
    //          var message = ...;     //          v_query.setLastErrorMessage(message);
    //          return;
    //      }
    //
    //      for (var row in rows) {
    //          v_table.addRow(row);
    //      }
    //  } catch (ex) {
    //      var message = ex.getMessage();
    //      v_query.setLastErrorMessage(message);
    //  }
    var debug = true;
    doDebug('start');
    doDebug('v_query encoded query: ' + v_query.getEncodedQuery());
    doDebug('v_query getCondition[userid]: ' + v_query.getCondition('userid'));
    doDebug('v_query getParameter[userid]: ' + v_query.getParameter('userid'));
    doDebug('v_query getSysid: ' + v_query.getSysId());
	doDebug('v_query isGet? ' + v_query.isGet());

    var id = '';
    var factorsArray;
    if (v_query.isGet()) { //querying a sys_id
		doDebug("following isGet path");
        id = (v_query.getSysId()).substring(0, 20); // first 20 chars should be the user ID in okta
    } else if (v_query.getParameter('userid')) {
        //example logging output:
        // --OKTA_USERS_FACTORS DEBUG-- v_query getParameter[id]: 00u2wdf44jjCVpIWU5d7
        // --OKTA_USERS_FACTORS DEBUG-- adding row info: {"id":"opf3it3ytbdlSSYYn5d7","sys_id":"c3a5b31583bcee10cfbfc5a6feaad335"} to table. results: true
        // --OKTA_USERS_FACTORS DEBUG-- adding row info: {"id":"ost3it3b4qtPEAqZt5d7","sys_id":"47a5b31583bcee10cfbfc5a6feaad335"} to table. results: true
		doDebug("following getParameter userid path");
        id = v_query.getParameter('userid');

    } else {
		doDebug("following other path (should just return nothing)");
        // example logging output
        // --OKTA_USERS_FACTORS DEBUG-- v_query getParameter[id]: null
        // --OKTA_USERS_FACTORS DEBUG-- adding row info: {"id":"ost3it3b4qtPEAqZt5d7","sys_id":"de95331583bcee10cfbfc5a6feaad3f6"} to table. results: true
        // --OKTA_USERS_FACTORS DEBUG-- adding row info: {"id":"opf3it3ytbdlSSYYn5d7","sys_id":"5e95331583bcee10cfbfc5a6feaad3f6"} to table. results: true
        //factorsArray = callFlow('00u2wdf44jjCVpIWU5d7');
		return;
    }
	factorsArray = callFlow(id);
    doDebug("factorsArray -: " + factorsArray);
    factorsArray.forEach(function(o) {
        //doDebug("oooo");
        // generate a "sys_id" based on the object, so the same info coming back should generate the same MD5
        // (I think).  Maybe want to keep out the modify date time stuff??
        // 
        // o['sys_id'] = new GlideDigest().getMD5Hex(JSON.stringify(o));
        //create the sysid from the url + factor
        var sid = ((o.a__links.user.href).split('/')[6]); //userid..
        sid += (o.id).substring(0, 12);
        o['sys_id'] = sid;
        doDebug("factorsArray adding sys_id: " + o['sys_id']);
    });

    addFactorsToTable(v_table, v_query, JSON.stringify(factorsArray) /*it seems to want it as a json string*/ );


    function callFlow(id) {
        try {
            var inputs = {};
            inputs['userid'] = id; // String 

            // Start Asynchronously: Uncomment to run in background. Code snippet will not have access to outputs.
            // sn_fd.FlowAPI.getRunner().action('x_417611_daves_o_0.okta_get_user_factors').inBackground().withInputs(inputs).run();

            // Execute Synchronously: Run in foreground. Code snippet has access to outputs.
            var result = sn_fd.FlowAPI.getRunner().action('x_417611_daves_o_0.okta_get_user_factors').inForeground().withInputs(inputs).run();
            var outputs = result.getOutputs();
			var factorsArray; 
            // Get Outputs:
            // Note: outputs can only be retrieved when executing synchronously.
			var actionStatus = outputs.__action_status__.code; //int
			if(actionStatus === 100){ //if action status returned 100, it means no factors were found, lets return an empty array and set the last error message
				factorsArray = [];
				v_query.setLastErrorMessage(outputs.__action_status__.message);
			} else {
				factorsArray = outputs['factors_array']; // Array.Object
			}

        } catch (ex) {
            var message = ex//ex.getMessage();
            v_query.setLastErrorMessage(message);
			doDebug('EXCEPTION FROM ACTION CALL - MESSAGE: ' + JSON.stringify(ex));
        }
        //return JSON.stringify(factors_array);
        return factorsArray;
    }

    function addFactorsToTable(v_table, v_query, factorsArray) {
        var transformerDefinition = getTransformerDefinition();
        var transformer = new sn_tfrm.Transformer(transformerDefinition, factorsArray);
        // transformer parses the responseBody and extracts rows
        while (transformer.transform()) {
            // row is field-value map e.g. { active:"true", number: "INC0000001"}
            var row = transformer.getRow();
            //row.sys_id = gs.generateGUID() + '';

            // you may do any additional transformations to the row like GlideDuration, GlideDataTime etc. For example,
            // row.duration = new GlideDuration(row.duration);

            // finally add the row to the remote table
            doDebug("adding row info: " + JSON.stringify(row) + " to table. results: " + v_table.addRow(row));
        }
    }



    function getTransformerDefinition() {
        var path = '$.*';
        // create a rule list to map a field to its element path
        var ruleList = new sn_tfrm.TransformerRuleList()
            .fromJSON() // the response body is a JSON
            .addRule("sys_id", "$.sys_id")
            .addRule("id", "$.id")
            .addRule("factortype", "$.factorType")
            .addRule("lastupdated", "$.lastUpdated")
            .addRule("status", "$.status")
            .addRule("verify_allow", "$.a__links.verify.hints.allow")
            .addRule("verify_href", "$.a__links.verify.href")
            .addRule("userid", "$.a__links.user.href")
            //.thenReplace(/?!.*\//)
            .thenSplit("/", "$7");

        return new sn_tfrm.TransformerDefinition(ruleList /*, recordPath*/ );
    }

    doDebug('end');

    function doDebug(msg) {
        if (debug == true) {
            gs.info('--OKTA_USERS_FACTORS DEBUG-- ' + msg);
        }
    }

})(v_table, v_query);]]></script>
        <sys_class_name>sys_script_vtable</sys_class_name>
        <sys_created_by>david.nendza@gmail.com</sys_created_by>
        <sys_created_on>2025-04-07 21:00:25</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>757bc34d83b4ae10cfbfc5a6feaad37f</sys_id>
        <sys_mod_count>54</sys_mod_count>
        <sys_name>Okta Users Factor remote table def</sys_name>
        <sys_package display_value="Daves Okta Thing" source="x_417611_daves_o_0">4e95778e83a06a10cfbfc5a6feaad30e</sys_package>
        <sys_policy/>
        <sys_scope display_value="Daves Okta Thing">4e95778e83a06a10cfbfc5a6feaad30e</sys_scope>
        <sys_update_name>sys_script_vtable_757bc34d83b4ae10cfbfc5a6feaad37f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-04-28 16:14:59</sys_updated_on>
        <table>x_417611_daves_o_0_st_okta_user_factor</table>
        <update_script><![CDATA[(function executeUpdate(v_record, v_changed_fields) {
    // Parameters:
    //    v_record - a map of field names and values containing the sys_id of the record
    //          v_record.<field_name>                   - fields in the remote table GlideRecord
    //          v_record.setLastErrorMessage(message)   - signal an error
    //    v_changed_fields - a map of field names and values containing the sys_id of the
    //          v_changed_fields.<field_name>           - changed fields in the remote table GlideRecord

    // Sample code:
    //  try {
    //      update-external-system;
    //      if (there-was-an-error) {
    //          var message = ...;
    //          v_record.setLastErrorMessage(message);
    //      }
    //  } catch (ex) {
    //      var message = ex.getMessage();
    //      v_record.setLastErrorMessage(message);
    //  }

    Object.keys(v_changed_fields).map(function(k) {
        switch (k) {
            case "u_number":
                //gr.number = v_changed_fields.u_number;
                break;
            case "u_short_description":
                //gr.short_description = v_changed_fields.u_short_description;
                break;
        }
    });
})(v_record, v_changed_fields);]]></update_script>
    </sys_script_vtable>
</record_update>
